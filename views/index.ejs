<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Browser Based Font Manager</title>

    <style>
        <% fonts.forEach((font, index)=> {
                %> @font-face {
                    font-family: 'Font<%=index %>';
                    /* a unique font name for each font */
                    src: url('/font/<%= font.replace(/\\/g, '/') %>') format('<%= font.endsWith(' .ttf') ? "truetype" : font.endsWith(' .otf') ? "opentype" : "woff" %>');
                    /* set the font url from the fonts array and set the format to truetype, opentype or else to */
                }

                <%
            }) %>
    </style>

    <style>
        /* Css variable for main color */
        :root {
            --mainColor: #f09051f6;
        }

        #wrapper {
            padding: 1rem 2rem;
            border-radius: 0.5rem;
        }

        #fonts {
            background-color: rgb(231, 228, 228);
            border-radius: 0.5rem;
            padding: 1rem;
            margin-top: 1rem;
        }

        #categoryInput,
        #changedFontsDir {
            width: 40vw;
            margin-top: 0.5rem;
            margin-bottom: 0.5rem;
        }

        #fontSizeSlider {
            width: 90vw;
        }

        label {
            display: inline-block;
            margin-top: 1rem;
        }

        .fontWrap {
            display: flex;
            gap: 0.5rem;
        }

        .fontWrap {
    will-change: font-size;  /* Optimizes for changes in font-size */
}


        h1 {
            font-size: 4rem;
            font-family: Arial, Helvetica, sans-serif;
        }

        #mainTitle {
            /* background-color: white; */
            display: inline-block;
            padding: 1rem;
            margin: 2rem 0;
        }

        button {
            background-color: var(--mainColor);
            padding: 0.5rem;
            border: none;
            color: white;
            text-align: center;
            font-size: 16px;
            margin: 4px 2px;
            opacity: 0.6;
            transition: 0.3s;
            display: inline-block;
            text-decoration: none;
            cursor: pointer;
            border-radius: 0.3rem;
        }

        button:hover {
            opacity: 1
        }

        .mainColor {
            color: var(--mainColor);
        }


        .thin {
            font-family: "Roboto-thin";
        }

        @font-face {
            font-family: "Roboto-thin";
            src: url("/fonts/Roboto-Thin.ttf");
        }

        .custom-dropdown {
    position: absolute;
    background-color: white;
    border: 1px solid #ccc;
    border-radius: 5px;
    display: none;
    max-height: 200px;
    overflow-y: auto;
    width: 40vw; /* Adjust width as necessary */
    z-index: 1000; /* High z-index to ensure it appears on top */
}


.dropdown-item {
    padding: 8px 10px;
    cursor: pointer;
}

.dropdown-item:hover {
    background-color: #f0f0f0;
}

.loading-indicator {
    display: none; /* Hidden by default */
    position: fixed; /* Or 'absolute' if inside a positioned parent */
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    padding: 10px 20px;
    background-color: rgba(0, 0, 0, 0.75);
    color: white;
    z-index: 1050; /* Ensure it's above most content */
    border-radius: 5px;
    text-align: center;
}



    </style>

</head>

<body>

    <div id="wrapper">

        <h1 id="mainTitle"><span class="thin">FONT</span> <span class="mainColor">MANAGER</span></h1>

        <div id="loadingIndicator" class="loading-indicator">
            Loading...
        </div>
        


        <form action="/change-font-dir" method="post">
            <label for="changedFontsDir">Change fonts directory:</label>
            <br>
            <input type="text" name="changedFontsDir" id="changedFontsDir" value="<%= fontsDir %>"
                placeholder="Enter font directory path">
            <button type="submit">Change Directory</button>
        </form>

        <!-- Font categorization form -->
        <form action="/categorize-fonts" method="post">
            <label for="categoryInput">Categorize selected fonts:</label>
            <br>
            <input name="categoryInput" id="categoryInput" placeholder="Enter a new category name or select one from the list">
            <div id="categoriesDropdown" class="custom-dropdown">
                <% categories.forEach(category => { %>
                    <div onclick="selectCategory('<%= category %>')" class="dropdown-item"><%= category %></div>
                <% }); %>
            </div>
            <button id="actionButton" type="submit">Assign to Category</button>
            
            <button type="button" onclick="handleRemoveFromCategory()">Remove from Category</button> 
            <input type="checkbox" name="filterByCategory" id="filterByCategory"> Filter by this category
 
            <br>

            <label for="fontSizeSlider">Change font size:</label>
            <br>
            <input type="range" id="fontSizeSlider" min="7" max="70" value="16">

            <button id="openFontsDirBtn" type="button">Open Fonts Directory</button>

            <button id="scrollToBottomBtn" type="button">Scroll to Bottom</button>


            <% fonts.forEach((font, index)=> { %>
                <div class="fontWrap"
                    data-categories="<%= fontCategories[font] ? fontCategories[font].join(' ') : '' %>"
                    title="<%= path.join(fontsDir, font) %>"> <!-- Concatenate fontsDir with font -->
                    <input type="checkbox" class="selectFont" name="selectedFonts" value="<%= font %>">
                    <p style="font-family: 'Font<%=index %>';" contenteditable="true">Sample text using the font <%= font %></p>
                </div>
            <% }) %>
            
            

        </form>



        <script>

            //filter with the checkbox
            const filterByCategory = document.getElementById('filterByCategory');
            const fontWraps = document.querySelectorAll('.fontWrap');
            const slider = document.getElementById('fontSizeSlider');

             // Add the synchronization script
             document.addEventListener('DOMContentLoaded', function() {
    const editableTexts = document.querySelectorAll('.fontWrap p[contenteditable="true"]');  // Ensure targeting is correct

    editableTexts.forEach(element => {
        element.addEventListener('input', function(event) {
            const newText = event.target.textContent;  // Use 'textContent' for better compatibility
            editableTexts.forEach(otherElement => {
                if (otherElement !== event.target) {
                    otherElement.textContent = newText;  // Ensure consistent text update
                }
            });
        });
    }); // end of editableTexts forEach

    //open the fonts directory
    document.getElementById('openFontsDirBtn').addEventListener('click', function() {
    // Send a request to the server to open the fonts directory
    fetch('/open-fonts-dir')
        .then(response => {
            if (response.ok) {
                console.log('Fonts directory opened successfully');
                // You can add additional handling here if needed
            } else {
                console.error('Failed to open fonts directory:', response.statusText);
            }
        })
        .catch(error => {
            console.error('Error opening fonts directory:', error);
        });
});



});


filterByCategory.addEventListener('change', function() {
    let isFiltering = this.checked; // true or false
    fontWraps.forEach(fontWrap => {
        if (isFiltering && !fontWrap.getAttribute('data-categories').split(' ').includes(categoryInput.value)) {
            fontWrap.style.display = 'none';
        } else {
            fontWrap.style.display = '';
        }
    });
});

//remove from category
function handleRemoveFromCategory() {
    // Prevent any default form submission
    event.preventDefault();

    // Prepare URL-encoded data
    const formData = new URLSearchParams();
    document.querySelectorAll('.selectFont:checked').forEach(checkbox => {
        formData.append('selectedFonts', checkbox.value);
    });
    const categoryInput = document.getElementById('categoryInput').value;
    formData.append('categoryToRemove', categoryInput);

    // Use Fetch API to send the data as URL-encoded
    fetch('/remove-from-category', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: formData
    })
    .then(response => response.text())
    .then(data => {
        console.log('Server Response:', data);  // Log server response
        window.location.reload();  // Optionally reload the page to reflect changes
    })
    .catch(error => console.error('Error:', error));
}


document.getElementById('categoryInput').addEventListener('focus', function() {
    document.getElementById('categoriesDropdown').style.display = 'block';
});

document.getElementById('categoryInput').addEventListener('blur', function() {
    setTimeout(() => { // timeout to allow click event to fire on dropdown items
        document.getElementById('categoriesDropdown').style.display = 'none';
    }, 200);
});

function selectCategory(category) {
    document.getElementById('categoryInput').value = category;
    document.getElementById('categoriesDropdown').style.display = 'none';
}




function updateFontSizeForVisible(fonts, size) {
        // Update only the first 15 fonts based on their appearance in the DOM
        fonts.slice(0, 15).forEach(font => {
            font.style.fontSize = `${size}px`;
        });
    }

    function updateAllFonts(size) {
        // Update all fonts
        fontWraps.forEach(font => {
            font.style.fontSize = `${size}px`;
        });
    }

    let rafId;

slider.addEventListener('input', () => {
    const newSize = slider.value;
    if (rafId) {
        cancelAnimationFrame(rafId);  // Cancel any pending updates to avoid stacking calls
    }
    rafId = requestAnimationFrame(() => {
        updateFontSizeForVisible(Array.from(fontWraps), newSize);
    });
});

slider.addEventListener('change', () => {
    cancelAnimationFrame(rafId);  // Ensure no frame is pending before applying final updates
    const newSize = slider.value;
    updateAllFonts(newSize);
});




let scrollInterval; // Declare outside to access in different functions

function stopScrolling(event) {
    if (!event || event.target !== document.getElementById('scrollToBottomBtn')) {
        clearInterval(scrollInterval);
        window.removeEventListener('keydown', stopScrolling);
        window.removeEventListener('click', stopScrolling);
    }
}



document.getElementById('scrollToBottomBtn').addEventListener('click', function(event) {
    if (!scrollInterval) {
        let intervalMs = 10;  // Time in milliseconds between each scroll increment
        let stepSize = 1;    // Pixels to scroll each interval

        // Initiate the first scroll immediately on click for responsiveness
        window.scrollBy(0, stepSize);

        // Set the scroll interval for subsequent scrolls
        scrollInterval = setInterval(function() {
            if (window.scrollY + window.innerHeight >= document.body.scrollHeight) {
                stopScrolling();
            } else {
                window.scrollBy(0, stepSize);
            }
        }, intervalMs);

        // Add listeners to stop scrolling on key press or mouse click
        window.addEventListener('keydown', stopScrolling);
        window.addEventListener('click', stopScrolling);
    }
});

        </script>

    </div> <!-- end wrapper -->

</body>

</html>